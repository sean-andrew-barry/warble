export module code.bytecodes;

import <cstdint>;

namespace code {
  export enum class Bytecodes : uint8_t {
    Extended,
    NoOperation,
    DirectJump,
    ShortJump,
    NearJump,
    JumpIfEqual,
    JumpIfZero,
    JumpIfNotEqual,
    JumpIfNotZero,
    JumpIfGreater,
    JumpIfGreaterOrEqual,
    JumpIfLess,
    JumpIfLessOrEqual,
    JumpIfSign,
    JumpIfNotSign,
    JumpIfAbove,
    JumpIfAboveOrEqual,
    JumpIfBelow,
    JumpIfBelowOrEqual,
    Push,
    Pop,
    Allocate,
    AllocateLarge,
    Deallocate,
    DeallocateLarge,
    Call,
    Return,
    Load8,
    Load16,
    Load32,
    Load64,
    Store8,
    Store16,
    Store32,
    Store64,
    StoreImmediate8,
    StoreImmediate16,
    StoreImmediate32,
    StoreImmediate64,
    Move,
    AddU8,
    AddU16,
    AddU32,
    AddU64,
    AddI8,
    AddI16,
    AddI32,
    AddI64,
    AddF32,
    AddF64,
    SubtractU8,
    SubtractU16,
    SubtractU32,
    SubtractU64,
    SubtractI8,
    SubtractI16,
    SubtractI32,
    SubtractI64,
    SubtractF32,
    SubtractF64,
    MultiplyU8,
    MultiplyU16,
    MultiplyU32,
    MultiplyU64,
    MultiplyI8,
    MultiplyI16,
    MultiplyI32,
    MultiplyI64,
    MultiplyF32,
    MultiplyF64,
    DivideU8,
    DivideU16,
    DivideU32,
    DivideU64,
    DivideI8,
    DivideI16,
    DivideI32,
    DivideI64,
    DivideF32,
    DivideF64,
    ModuloU8,
    ModuloU16,
    ModuloU32,
    ModuloU64,
    ModuloI8,
    ModuloI16,
    ModuloI32,
    ModuloI64,
    ModuloF32,
    ModuloF64,
    NegateI8,
    NegateI32,
    NegateI16,
    NegateI64,
    NegateF32,
    NegateF64,
    EqualU64,
    EqualF32,
    EqualF64,
    NotEqualU64,
    NotEqualF32,
    NotEqualF64,
    Greater,
    Lesser,
    GreaterOrEqual,
    LesserOrEqual,
    LogicalAnd,
    LogicalOr,
    LogicalNot,
    BitwiseAnd,
    BitwiseOr,
    BitwiseExclusiveOr,
    BitwiseNot,
  };
};