export module visitor.virtual_encoder;

import visitor;
import <vector>;
import <cstdint>;

namespace visitor {
  export class VirtualEncoder : public Visitor {
  private:
    std::vector<std::byte> code;
  public:
    void Visit(node::Block& block) final;
    void Visit(node::Compiler& compiler) final;
    void Visit(node::Scope& scope) final;
    void Visit(node::scope::Conditional& conditional) final;
    void Visit(node::scope::conditional::If& _if) final;
    void Visit(node::scope::conditional::Else& _else) final;
    void Visit(node::scope::conditional::ElseIf& _else_if) final;
    void Visit(node::scope::conditional::Loop& loop) final;
    void Visit(node::scope::conditional::loop::Do& _do) final;
    void Visit(node::scope::conditional::loop::While& _while) final;
    void Visit(node::scope::conditional::loop::For& _for) final;
    void Visit(node::scope::conditional::Pattern& pattern) final;
    void Visit(node::scope::conditional::pattern::Cover& cover) final;
    void Visit(node::scope::conditional::pattern::Match& match) final;
    void Visit(node::scope::conditional::pattern::Default& _default) final;
    void Visit(node::scope::conditional::pattern::Is& is) final;
    void Visit(node::scope::Context& context) final;
    void Visit(node::scope::context::Module& _module) final;
    void Visit(node::scope::context::Function& function) final;
    void Visit(node::scope::context::function::Inline& inline_function) final;
    void Visit(node::Declaration& declaration) final;
    void Visit(node::Instruction& instruction) final;
    void Visit(node::declaration::Automatic& automatic) final;
    void Visit(node::declaration::Forward& forward) final;
    void Visit(node::declaration::Spread& spread) final;
    void Visit(node::declaration::Typed& typed) final;
    void Visit(node::declaration::Literal& literal) final;
    void Visit(node::declaration::literal::Primitive& primitive) final;
    void Visit(node::declaration::literal::Structured& structured) final;
    void Visit(node::declaration::literal::primitive::Boolean& boolean) final;
    void Visit(node::declaration::literal::primitive::Character& character) final;
    void Visit(node::declaration::literal::primitive::Null& null) final;
    void Visit(node::declaration::literal::primitive::Undefined& undefined) final;
    void Visit(node::declaration::literal::primitive::Numeric& numeric) final;
    void Visit(node::declaration::literal::primitive::numeric::Decimal& decimal) final;
    void Visit(node::declaration::literal::primitive::numeric::Integer& integer) final;
    void Visit(node::declaration::literal::primitive::numeric::Number& number) final;
    void Visit(node::declaration::literal::structured::Array& array) final;
    void Visit(node::declaration::literal::structured::Enum& _enum) final;
    void Visit(node::declaration::literal::structured::Object& object) final;
    void Visit(node::declaration::literal::structured::String& string) final;
    void Visit(node::declaration::literal::structured::TemplateString& template_string) final;
    void Visit(node::declaration::literal::structured::Tuple& tuple) final;
    void Visit(node::declaration::literal::structured::Function& function) final;
    void Visit(node::instruction::Memory& memory) final;
    void Visit(node::instruction::Control& control) final;
    void Visit(node::instruction::Unary& unary) final;
    void Visit(node::instruction::Binary& binary) final;
    void Visit(node::instruction::memory::Construct& construct) final;
    void Visit(node::instruction::memory::Destruct& destruct) final;
    void Visit(node::instruction::memory::Move& move) final;
    void Visit(node::instruction::memory::Store& store) final;
    void Visit(node::instruction::memory::Load& load) final;
    void Visit(node::instruction::control::Return& _return) final;
    void Visit(node::instruction::control::Continue& _continue) final;
    void Visit(node::instruction::control::Break& _break) final;
    void Visit(node::instruction::control::Jump& jump) final;
    void Visit(node::instruction::control::jump::Absolute& absolute) final;
    void Visit(node::instruction::control::jump::Relative& relative) final;
    void Visit(node::instruction::control::jump::Equal& equal) final;
    void Visit(node::instruction::control::jump::Zero& zero) final;
    void Visit(node::instruction::control::jump::NotEqual& not_equal) final;
    void Visit(node::instruction::control::jump::NotZero& not_zero) final;
    void Visit(node::instruction::control::jump::Greater& greater) final;
    void Visit(node::instruction::control::jump::GreaterOrEqual& greater_or_equal) final;
    void Visit(node::instruction::control::jump::Less& less) final;
    void Visit(node::instruction::control::jump::LessOrEqual& less_or_equal) final;
    void Visit(node::instruction::control::jump::Sign& sign) final;
    void Visit(node::instruction::control::jump::NotSign& not_sign) final;
    void Visit(node::instruction::control::jump::Above& above) final;
    void Visit(node::instruction::control::jump::AboveOrEqual& above_or_equal) final;
    void Visit(node::instruction::control::jump::Below& below) final;
    void Visit(node::instruction::control::jump::BelowOrEqual& below_or_equal) final;
    void Visit(node::instruction::unary::BitwiseNot& bitwise_not) final;
    void Visit(node::instruction::unary::Copy& copy) final;
    void Visit(node::instruction::unary::Reference& reference) final;
    void Visit(node::instruction::unary::Spread& spread) final;
    void Visit(node::instruction::unary::Optional& optional) final;
    void Visit(node::instruction::unary::Symbol& symbol) final;
    void Visit(node::instruction::unary::Length& length) final;
    void Visit(node::instruction::unary::Virtual& _virtual) final;
    void Visit(node::instruction::unary::Not& _not) final;
    void Visit(node::instruction::unary::Increment& increment) final;
    void Visit(node::instruction::unary::Decrement& decrement) final;
    void Visit(node::instruction::unary::Positive& positive) final;
    void Visit(node::instruction::unary::Negative& negative) final;
    void Visit(node::instruction::unary::Await& await) final;
    void Visit(node::instruction::unary::Expected& expected) final;
    void Visit(node::instruction::unary::Unexpected& unexpected) final;
    void Visit(node::instruction::unary::Yield& yield) final;
    void Visit(node::instruction::unary::Postfix& postfix) final;
    void Visit(node::instruction::unary::postfix::Increment& increment) final;
    void Visit(node::instruction::unary::postfix::Decrement& decrement) final;
    void Visit(node::instruction::binary::And& _and) final;
    void Visit(node::instruction::binary::Or& _or) final;
    void Visit(node::instruction::binary::Nullish& nullish) final;
    void Visit(node::instruction::binary::Equal& equal) final;
    void Visit(node::instruction::binary::NotEqual& not_equal) final;
    void Visit(node::instruction::binary::Assert& assert) final;
    void Visit(node::instruction::binary::Greater& greater) final;
    void Visit(node::instruction::binary::GreaterOrEqual& greater_or_equal) final;
    void Visit(node::instruction::binary::Lesser& lesser) final;
    void Visit(node::instruction::binary::LesserOrEqual& lesser_or_equal) final;
    void Visit(node::instruction::binary::Add& add) final;
    void Visit(node::instruction::binary::Subtract& subtract) final;
    void Visit(node::instruction::binary::Multiply& multiply) final;
    void Visit(node::instruction::binary::Divide& divide) final;
    void Visit(node::instruction::binary::Modulo& modulo) final;
    void Visit(node::instruction::binary::Exponent& exponent) final;
    void Visit(node::instruction::binary::Assign& assign) final;
    void Visit(node::instruction::binary::Access& access) final;
    void Visit(node::instruction::binary::Bitwise& bitwise) final;
    void Visit(node::instruction::binary::Range& range) final;
    void Visit(node::instruction::binary::Call& call) final;
    void Visit(node::instruction::binary::assert::Equal& equal) final;
    void Visit(node::instruction::binary::assert::NotEqual& not_equal) final;
    void Visit(node::instruction::binary::assert::GreaterOrEqual& greater_or_equal) final;
    void Visit(node::instruction::binary::assert::LesserOrEqual& lesser_or_equal) final;
    void Visit(node::instruction::binary::assign::Add& add) final;
    void Visit(node::instruction::binary::assign::Subtract& subtract) final;
    void Visit(node::instruction::binary::assign::Multiply& multiply) final;
    void Visit(node::instruction::binary::assign::Divide& divide) final;
    void Visit(node::instruction::binary::assign::Modulo& modulo) final;
    void Visit(node::instruction::binary::assign::Exponent& exponent) final;
    void Visit(node::instruction::binary::access::Member& member) final;
    void Visit(node::instruction::binary::access::member::Static& _static) final;
    void Visit(node::instruction::binary::access::member::Optional& optional) final;
    void Visit(node::instruction::binary::bitwise::And& _and) final;
    void Visit(node::instruction::binary::bitwise::Or& _or) final;
    void Visit(node::instruction::binary::bitwise::Xor& _xor) final;
    void Visit(node::instruction::binary::bitwise::Shift& shift) final;
    void Visit(node::instruction::binary::bitwise::Assign& assign) final;
    void Visit(node::instruction::binary::bitwise::shift::Left& left) final;
    void Visit(node::instruction::binary::bitwise::shift::Right& right) final;
    void Visit(node::instruction::binary::bitwise::shift::Triple& triple) final;
    void Visit(node::instruction::binary::bitwise::shift::triple::Left& left) final;
    void Visit(node::instruction::binary::bitwise::shift::triple::Right& right) final;
    void Visit(node::instruction::binary::bitwise::assign::And& _and) final;
    void Visit(node::instruction::binary::bitwise::assign::Xor& _xor) final;
    void Visit(node::instruction::binary::bitwise::assign::Or& _or) final;
    void Visit(node::instruction::binary::bitwise::assign::Shift& shift) final;
    void Visit(node::instruction::binary::bitwise::assign::shift::Left& left) final;
    void Visit(node::instruction::binary::bitwise::assign::shift::Right& right) final;
    void Visit(node::instruction::binary::bitwise::assign::shift::Triple& triple) final;
    void Visit(node::instruction::binary::bitwise::assign::shift::triple::Left& left) final;
    void Visit(node::instruction::binary::bitwise::assign::shift::triple::Right& right) final;
    void Visit(node::instruction::binary::range::Exclusive& exclusive) final;
    void Visit(node::instruction::binary::range::Inclusive& inclusive) final;
    void Visit(node::instruction::binary::call::Character& character) final;
    void Visit(node::instruction::binary::call::Decimal& decimal) final;
    void Visit(node::instruction::binary::call::Integer& integer) final;
    void Visit(node::instruction::binary::call::Number& number) final;
    void Visit(node::instruction::binary::call::Array& array) final;
    void Visit(node::instruction::binary::call::Enum& _enum) final;
    void Visit(node::instruction::binary::call::Object& object) final;
    void Visit(node::instruction::binary::call::String& string) final;
    void Visit(node::instruction::binary::call::TemplateString& template_string) final;
    void Visit(node::instruction::binary::call::Tuple& tuple) final;
    void Visit(node::instruction::binary::call::Function& function) final;
    void Visit(node::instruction::TernaryCondition& ternary_condition) final;
    void Visit(node::instruction::Phi& phi) final;
  };
};